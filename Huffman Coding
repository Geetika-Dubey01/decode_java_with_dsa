import java.util.*;
class HuffmanCoding {
    static class Node {
        char ch;
        int freq;
        Node left, right;
        Node(char c, int f) {
            ch = c;
            freq = f;
        }
    }
    public static void printCodes(Node root, String code) {
        if (root == null) return;
        if (root.left == null && root.right == null)
            System.out.println(root.ch + ": " + code);
        printCodes(root.left, code + "0");
        printCodes(root.right, code + "1");
    }
    public static void main(String[] args) {
        char[] chars = { 'a', 'b', 'c', 'd', 'e', 'f' };
        int[] freq = { 5, 9, 12, 13, 16, 45 };
        PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(n -> n.freq));
        for (int i = 0; i < chars.length; i++)
            pq.add(new Node(chars[i], freq[i]));
        while (pq.size() > 1) {
            Node left = pq.poll();
            Node right = pq.poll();
            Node merged = new Node('-', left.freq + right.freq);
            merged.left = left;
            merged.right = right;
            pq.add(merged);
        }
        Node root = pq.poll();
        printCodes(root, "");
    }
}
